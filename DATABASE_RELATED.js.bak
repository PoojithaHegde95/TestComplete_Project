
var propArray,propValues,level
function GetObjectProperties_FromJSON(page,ObjectName)
{
    try
    {
        var objJson,propertyName1 ,propertyName2 ,propertyValue3,propertyValue1,propertyValue2,propertyName3,level1;
        objJson = ReadDBJSONData1(page)
        if (objJson != null)
        {
    	    //Object name are case sensitive, it there is any case mismatch, then objJson[objectName].PropertyName1 will throw expection 
    	    //Ex: In JSON if objectname is 'userCtrlCommercialRef_Module1' and while searching if we search as 'userCtrlCommercialRef_module1'
    	    //Output/return value will be null
    	      propertyName1=objJson[ObjectName].PropertyName1; 
    	      propertyValue1=objJson[ObjectName].PropertyValue1;
            propertyName2=objJson[ObjectName].PropertyName2;             
            propertyValue2=objJson[ObjectName].PropertyValue2 ; 
            propertyName3=objJson[ObjectName].PropertyName3 ;           
            propertyValue3=objJson[ObjectName].PropertyValue3;           
            level1 = objJson[ObjectName].Level;
            
            propArray = new Array();
            propValues = new Array();
            if(propertyName1 != "" && propertyName1!="NULL")
            {
                propArray[0] = propertyName1;
                propValues[0] = propertyValue1;
            }
            if(propertyName2 != "" && propertyName2!="NULL")
            {
                propArray[1] = propertyName2;
                propValues[1] = propertyValue2;
            }
            if(propertyName3 != "" && propertyName3!="NULL")
            {
                propArray[2] = propertyName3;
                propValues[2] = propertyValue3;
            }
            if(level1 != "" && level1 != "NULL")
            {
                level = level1;
                
            }
            return true;          
        }
        return false;        
    }
    catch(Ex)
    {
        Log["Error"]("Expection in the function GetObjectProperties_FromJSON "+Ex.message)
    }  
}
//Function to recognising object 
function GetRecognitionObject(parent,page,objectName)
{
    if(parent != null)
    {
        var hasObj,objectData,tempObjectName;
        tempObjectName = objectName;
        for(i=1;i<10;i++)
        {
           hasObj =GetObjectProperties_FromJSON(page,objectName)
            if(hasObj == true)
            {
                if(parent != null)
                {
                    objectData = parent.FindChild(propArray,propValues,level);
                    if(objectData.Exists == true)
                        return objectData;
                    tempObjectName = objectName+aqConvert["VarToStr"](i+1);
                }
                else
                    return null;
            }
            else
                return null;
        }
    }
    return null;
}

//Reading Json TestData
function ReadJson(FileName)
{
  try
  {
      var path, JSonFilepath, data, TestObj
      //All Json test data files are maintained under Test Data folder under the project
      JSonFilepath = aqFileSystem["GetCurrentFolder"]() + "\\TestData\\ObjectFile\\" +FileName;
      //Check for given Json file exists
      if(aqFile.Exists(JSonFilepath))
      {
          Log.Message("The test data file "+FileName+" is present") 
          //The test data file in Json formate is accessed as object
          data = aqFile.ReadWholeTextFile(JSonFilepath, aqFile.ctANSI);
          TestObj = eval("(" + data + ")") ;
           return TestObj;
     }
     else
     {
        Log.Error("The test data file tried to access,"+FileName+" is not found!")
        return null;
     }
  }
  catch(e)
  { 
     Log.Error("An error occured in ReadJson") 
  }
}

//Reading Database 
function ReadDBJSONData1(strPage) 
{
    var objJSON = null;
    var pathFile =aqFileSystem["GetCurrentFolder"]() + "\\TestData\\ObjectFile\\" +strPage+".json";
    try
    {
    	if(!aqFile["Exists"](pathFile))
    	   throw new Error("Path Not found")
    	var fileContent = aqFile["ReadWholeTextFile"](pathFile, aqFile["ctUTF8"])
    	var objJSON = eval("(" + fileContent + ")");
    	if (objJSON == null)
    	   throw new Error("JSON obj Not found")
    	else
    	    return objJSON  
     }
     catch(Ex)
    {
	     Log["Error"]("Expection in the function ReadDBJSONData")
    }
}